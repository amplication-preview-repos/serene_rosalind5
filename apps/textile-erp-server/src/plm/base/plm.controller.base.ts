/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlmService } from "../plm.service";
import { PlmCreateInput } from "./PlmCreateInput";
import { Plm } from "./Plm";
import { PlmFindManyArgs } from "./PlmFindManyArgs";
import { PlmWhereUniqueInput } from "./PlmWhereUniqueInput";
import { PlmUpdateInput } from "./PlmUpdateInput";

export class PlmControllerBase {
  constructor(protected readonly service: PlmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Plm })
  async createPlm(@common.Body() data: PlmCreateInput): Promise<Plm> {
    return await this.service.createPlm({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Plm] })
  @ApiNestedQuery(PlmFindManyArgs)
  async plms(@common.Req() request: Request): Promise<Plm[]> {
    const args = plainToClass(PlmFindManyArgs, request.query);
    return this.service.plms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Plm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async plm(@common.Param() params: PlmWhereUniqueInput): Promise<Plm | null> {
    const result = await this.service.plm({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Plm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlm(
    @common.Param() params: PlmWhereUniqueInput,
    @common.Body() data: PlmUpdateInput
  ): Promise<Plm | null> {
    try {
      return await this.service.updatePlm({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Plm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlm(
    @common.Param() params: PlmWhereUniqueInput
  ): Promise<Plm | null> {
    try {
      return await this.service.deletePlm({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
