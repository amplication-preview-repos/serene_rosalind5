/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Plm } from "./Plm";
import { PlmCountArgs } from "./PlmCountArgs";
import { PlmFindManyArgs } from "./PlmFindManyArgs";
import { PlmFindUniqueArgs } from "./PlmFindUniqueArgs";
import { DeletePlmArgs } from "./DeletePlmArgs";
import { PlmService } from "../plm.service";
@graphql.Resolver(() => Plm)
export class PlmResolverBase {
  constructor(protected readonly service: PlmService) {}

  async _plmsMeta(
    @graphql.Args() args: PlmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Plm])
  async plms(@graphql.Args() args: PlmFindManyArgs): Promise<Plm[]> {
    return this.service.plms(args);
  }

  @graphql.Query(() => Plm, { nullable: true })
  async plm(@graphql.Args() args: PlmFindUniqueArgs): Promise<Plm | null> {
    const result = await this.service.plm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Plm)
  async deletePlm(@graphql.Args() args: DeletePlmArgs): Promise<Plm | null> {
    try {
      return await this.service.deletePlm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
