/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccountsBudgetingService } from "../accountsBudgeting.service";
import { AccountsBudgetingCreateInput } from "./AccountsBudgetingCreateInput";
import { AccountsBudgeting } from "./AccountsBudgeting";
import { AccountsBudgetingFindManyArgs } from "./AccountsBudgetingFindManyArgs";
import { AccountsBudgetingWhereUniqueInput } from "./AccountsBudgetingWhereUniqueInput";
import { AccountsBudgetingUpdateInput } from "./AccountsBudgetingUpdateInput";

export class AccountsBudgetingControllerBase {
  constructor(protected readonly service: AccountsBudgetingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountsBudgeting })
  async createAccountsBudgeting(
    @common.Body() data: AccountsBudgetingCreateInput
  ): Promise<AccountsBudgeting> {
    return await this.service.createAccountsBudgeting({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountsBudgeting] })
  @ApiNestedQuery(AccountsBudgetingFindManyArgs)
  async accountsBudgetings(
    @common.Req() request: Request
  ): Promise<AccountsBudgeting[]> {
    const args = plainToClass(AccountsBudgetingFindManyArgs, request.query);
    return this.service.accountsBudgetings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountsBudgeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accountsBudgeting(
    @common.Param() params: AccountsBudgetingWhereUniqueInput
  ): Promise<AccountsBudgeting | null> {
    const result = await this.service.accountsBudgeting({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountsBudgeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccountsBudgeting(
    @common.Param() params: AccountsBudgetingWhereUniqueInput,
    @common.Body() data: AccountsBudgetingUpdateInput
  ): Promise<AccountsBudgeting | null> {
    try {
      return await this.service.updateAccountsBudgeting({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountsBudgeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccountsBudgeting(
    @common.Param() params: AccountsBudgetingWhereUniqueInput
  ): Promise<AccountsBudgeting | null> {
    try {
      return await this.service.deleteAccountsBudgeting({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
