/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccountsBudgeting } from "./AccountsBudgeting";
import { AccountsBudgetingCountArgs } from "./AccountsBudgetingCountArgs";
import { AccountsBudgetingFindManyArgs } from "./AccountsBudgetingFindManyArgs";
import { AccountsBudgetingFindUniqueArgs } from "./AccountsBudgetingFindUniqueArgs";
import { DeleteAccountsBudgetingArgs } from "./DeleteAccountsBudgetingArgs";
import { AccountsBudgetingService } from "../accountsBudgeting.service";
@graphql.Resolver(() => AccountsBudgeting)
export class AccountsBudgetingResolverBase {
  constructor(protected readonly service: AccountsBudgetingService) {}

  async _accountsBudgetingsMeta(
    @graphql.Args() args: AccountsBudgetingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccountsBudgeting])
  async accountsBudgetings(
    @graphql.Args() args: AccountsBudgetingFindManyArgs
  ): Promise<AccountsBudgeting[]> {
    return this.service.accountsBudgetings(args);
  }

  @graphql.Query(() => AccountsBudgeting, { nullable: true })
  async accountsBudgeting(
    @graphql.Args() args: AccountsBudgetingFindUniqueArgs
  ): Promise<AccountsBudgeting | null> {
    const result = await this.service.accountsBudgeting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccountsBudgeting)
  async deleteAccountsBudgeting(
    @graphql.Args() args: DeleteAccountsBudgetingArgs
  ): Promise<AccountsBudgeting | null> {
    try {
      return await this.service.deleteAccountsBudgeting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
