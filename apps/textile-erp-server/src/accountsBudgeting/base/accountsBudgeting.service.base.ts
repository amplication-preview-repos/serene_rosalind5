/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccountsBudgeting as PrismaAccountsBudgeting,
} from "@prisma/client";

export class AccountsBudgetingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountsBudgetingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountsBudgeting.count(args);
  }

  async accountsBudgetings(
    args: Prisma.AccountsBudgetingFindManyArgs
  ): Promise<PrismaAccountsBudgeting[]> {
    return this.prisma.accountsBudgeting.findMany(args);
  }
  async accountsBudgeting(
    args: Prisma.AccountsBudgetingFindUniqueArgs
  ): Promise<PrismaAccountsBudgeting | null> {
    return this.prisma.accountsBudgeting.findUnique(args);
  }
  async createAccountsBudgeting(
    args: Prisma.AccountsBudgetingCreateArgs
  ): Promise<PrismaAccountsBudgeting> {
    return this.prisma.accountsBudgeting.create(args);
  }
  async updateAccountsBudgeting(
    args: Prisma.AccountsBudgetingUpdateArgs
  ): Promise<PrismaAccountsBudgeting> {
    return this.prisma.accountsBudgeting.update(args);
  }
  async deleteAccountsBudgeting(
    args: Prisma.AccountsBudgetingDeleteArgs
  ): Promise<PrismaAccountsBudgeting> {
    return this.prisma.accountsBudgeting.delete(args);
  }
}
