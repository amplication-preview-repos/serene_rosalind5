/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QmsService } from "../qms.service";
import { QmsCreateInput } from "./QmsCreateInput";
import { Qms } from "./Qms";
import { QmsFindManyArgs } from "./QmsFindManyArgs";
import { QmsWhereUniqueInput } from "./QmsWhereUniqueInput";
import { QmsUpdateInput } from "./QmsUpdateInput";

export class QmsControllerBase {
  constructor(protected readonly service: QmsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Qms })
  async createQms(@common.Body() data: QmsCreateInput): Promise<Qms> {
    return await this.service.createQms({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Qms] })
  @ApiNestedQuery(QmsFindManyArgs)
  async qmsItems(@common.Req() request: Request): Promise<Qms[]> {
    const args = plainToClass(QmsFindManyArgs, request.query);
    return this.service.qmsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Qms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async qms(@common.Param() params: QmsWhereUniqueInput): Promise<Qms | null> {
    const result = await this.service.qms({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Qms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQms(
    @common.Param() params: QmsWhereUniqueInput,
    @common.Body() data: QmsUpdateInput
  ): Promise<Qms | null> {
    try {
      return await this.service.updateQms({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Qms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQms(
    @common.Param() params: QmsWhereUniqueInput
  ): Promise<Qms | null> {
    try {
      return await this.service.deleteQms({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
