/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Qms } from "./Qms";
import { QmsCountArgs } from "./QmsCountArgs";
import { QmsFindManyArgs } from "./QmsFindManyArgs";
import { QmsFindUniqueArgs } from "./QmsFindUniqueArgs";
import { DeleteQmsArgs } from "./DeleteQmsArgs";
import { QmsService } from "../qms.service";
@graphql.Resolver(() => Qms)
export class QmsResolverBase {
  constructor(protected readonly service: QmsService) {}

  async _qmsItemsMeta(
    @graphql.Args() args: QmsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Qms])
  async qmsItems(@graphql.Args() args: QmsFindManyArgs): Promise<Qms[]> {
    return this.service.qmsItems(args);
  }

  @graphql.Query(() => Qms, { nullable: true })
  async qms(@graphql.Args() args: QmsFindUniqueArgs): Promise<Qms | null> {
    const result = await this.service.qms(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Qms)
  async deleteQms(@graphql.Args() args: DeleteQmsArgs): Promise<Qms | null> {
    try {
      return await this.service.deleteQms(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
