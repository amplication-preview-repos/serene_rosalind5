/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EcommerceIntegrationService } from "../ecommerceIntegration.service";
import { EcommerceIntegrationCreateInput } from "./EcommerceIntegrationCreateInput";
import { EcommerceIntegration } from "./EcommerceIntegration";
import { EcommerceIntegrationFindManyArgs } from "./EcommerceIntegrationFindManyArgs";
import { EcommerceIntegrationWhereUniqueInput } from "./EcommerceIntegrationWhereUniqueInput";
import { EcommerceIntegrationUpdateInput } from "./EcommerceIntegrationUpdateInput";

export class EcommerceIntegrationControllerBase {
  constructor(protected readonly service: EcommerceIntegrationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EcommerceIntegration })
  async createEcommerceIntegration(
    @common.Body() data: EcommerceIntegrationCreateInput
  ): Promise<EcommerceIntegration> {
    return await this.service.createEcommerceIntegration({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EcommerceIntegration] })
  @ApiNestedQuery(EcommerceIntegrationFindManyArgs)
  async ecommerceIntegrations(
    @common.Req() request: Request
  ): Promise<EcommerceIntegration[]> {
    const args = plainToClass(EcommerceIntegrationFindManyArgs, request.query);
    return this.service.ecommerceIntegrations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EcommerceIntegration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ecommerceIntegration(
    @common.Param() params: EcommerceIntegrationWhereUniqueInput
  ): Promise<EcommerceIntegration | null> {
    const result = await this.service.ecommerceIntegration({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EcommerceIntegration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEcommerceIntegration(
    @common.Param() params: EcommerceIntegrationWhereUniqueInput,
    @common.Body() data: EcommerceIntegrationUpdateInput
  ): Promise<EcommerceIntegration | null> {
    try {
      return await this.service.updateEcommerceIntegration({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EcommerceIntegration })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEcommerceIntegration(
    @common.Param() params: EcommerceIntegrationWhereUniqueInput
  ): Promise<EcommerceIntegration | null> {
    try {
      return await this.service.deleteEcommerceIntegration({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
