/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EcommerceIntegration as PrismaEcommerceIntegration,
} from "@prisma/client";

export class EcommerceIntegrationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EcommerceIntegrationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ecommerceIntegration.count(args);
  }

  async ecommerceIntegrations(
    args: Prisma.EcommerceIntegrationFindManyArgs
  ): Promise<PrismaEcommerceIntegration[]> {
    return this.prisma.ecommerceIntegration.findMany(args);
  }
  async ecommerceIntegration(
    args: Prisma.EcommerceIntegrationFindUniqueArgs
  ): Promise<PrismaEcommerceIntegration | null> {
    return this.prisma.ecommerceIntegration.findUnique(args);
  }
  async createEcommerceIntegration(
    args: Prisma.EcommerceIntegrationCreateArgs
  ): Promise<PrismaEcommerceIntegration> {
    return this.prisma.ecommerceIntegration.create(args);
  }
  async updateEcommerceIntegration(
    args: Prisma.EcommerceIntegrationUpdateArgs
  ): Promise<PrismaEcommerceIntegration> {
    return this.prisma.ecommerceIntegration.update(args);
  }
  async deleteEcommerceIntegration(
    args: Prisma.EcommerceIntegrationDeleteArgs
  ): Promise<PrismaEcommerceIntegration> {
    return this.prisma.ecommerceIntegration.delete(args);
  }
}
