/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BiService } from "../bi.service";
import { BiCreateInput } from "./BiCreateInput";
import { Bi } from "./Bi";
import { BiFindManyArgs } from "./BiFindManyArgs";
import { BiWhereUniqueInput } from "./BiWhereUniqueInput";
import { BiUpdateInput } from "./BiUpdateInput";

export class BiControllerBase {
  constructor(protected readonly service: BiService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bi })
  async createBi(@common.Body() data: BiCreateInput): Promise<Bi> {
    return await this.service.createBi({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bi] })
  @ApiNestedQuery(BiFindManyArgs)
  async bis(@common.Req() request: Request): Promise<Bi[]> {
    const args = plainToClass(BiFindManyArgs, request.query);
    return this.service.bis({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bi(@common.Param() params: BiWhereUniqueInput): Promise<Bi | null> {
    const result = await this.service.bi({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBi(
    @common.Param() params: BiWhereUniqueInput,
    @common.Body() data: BiUpdateInput
  ): Promise<Bi | null> {
    try {
      return await this.service.updateBi({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBi(
    @common.Param() params: BiWhereUniqueInput
  ): Promise<Bi | null> {
    try {
      return await this.service.deleteBi({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
