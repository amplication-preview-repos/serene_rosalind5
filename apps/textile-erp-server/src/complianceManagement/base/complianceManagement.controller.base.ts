/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ComplianceManagementService } from "../complianceManagement.service";
import { ComplianceManagementCreateInput } from "./ComplianceManagementCreateInput";
import { ComplianceManagement } from "./ComplianceManagement";
import { ComplianceManagementFindManyArgs } from "./ComplianceManagementFindManyArgs";
import { ComplianceManagementWhereUniqueInput } from "./ComplianceManagementWhereUniqueInput";
import { ComplianceManagementUpdateInput } from "./ComplianceManagementUpdateInput";

export class ComplianceManagementControllerBase {
  constructor(protected readonly service: ComplianceManagementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ComplianceManagement })
  async createComplianceManagement(
    @common.Body() data: ComplianceManagementCreateInput
  ): Promise<ComplianceManagement> {
    return await this.service.createComplianceManagement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ComplianceManagement] })
  @ApiNestedQuery(ComplianceManagementFindManyArgs)
  async complianceManagements(
    @common.Req() request: Request
  ): Promise<ComplianceManagement[]> {
    const args = plainToClass(ComplianceManagementFindManyArgs, request.query);
    return this.service.complianceManagements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ComplianceManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async complianceManagement(
    @common.Param() params: ComplianceManagementWhereUniqueInput
  ): Promise<ComplianceManagement | null> {
    const result = await this.service.complianceManagement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ComplianceManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateComplianceManagement(
    @common.Param() params: ComplianceManagementWhereUniqueInput,
    @common.Body() data: ComplianceManagementUpdateInput
  ): Promise<ComplianceManagement | null> {
    try {
      return await this.service.updateComplianceManagement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ComplianceManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteComplianceManagement(
    @common.Param() params: ComplianceManagementWhereUniqueInput
  ): Promise<ComplianceManagement | null> {
    try {
      return await this.service.deleteComplianceManagement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
