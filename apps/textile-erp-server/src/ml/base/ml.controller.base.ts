/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MlService } from "../ml.service";
import { MlCreateInput } from "./MlCreateInput";
import { Ml } from "./Ml";
import { MlFindManyArgs } from "./MlFindManyArgs";
import { MlWhereUniqueInput } from "./MlWhereUniqueInput";
import { MlUpdateInput } from "./MlUpdateInput";

export class MlControllerBase {
  constructor(protected readonly service: MlService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ml })
  async createMl(@common.Body() data: MlCreateInput): Promise<Ml> {
    return await this.service.createMl({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ml] })
  @ApiNestedQuery(MlFindManyArgs)
  async mls(@common.Req() request: Request): Promise<Ml[]> {
    const args = plainToClass(MlFindManyArgs, request.query);
    return this.service.mls({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ml })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ml(@common.Param() params: MlWhereUniqueInput): Promise<Ml | null> {
    const result = await this.service.ml({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ml })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMl(
    @common.Param() params: MlWhereUniqueInput,
    @common.Body() data: MlUpdateInput
  ): Promise<Ml | null> {
    try {
      return await this.service.updateMl({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ml })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMl(
    @common.Param() params: MlWhereUniqueInput
  ): Promise<Ml | null> {
    try {
      return await this.service.deleteMl({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
