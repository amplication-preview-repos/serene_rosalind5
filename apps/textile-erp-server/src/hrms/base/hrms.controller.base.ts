/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HrmsService } from "../hrms.service";
import { HrmsCreateInput } from "./HrmsCreateInput";
import { Hrms } from "./Hrms";
import { HrmsFindManyArgs } from "./HrmsFindManyArgs";
import { HrmsWhereUniqueInput } from "./HrmsWhereUniqueInput";
import { HrmsUpdateInput } from "./HrmsUpdateInput";

export class HrmsControllerBase {
  constructor(protected readonly service: HrmsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hrms })
  async createHrms(@common.Body() data: HrmsCreateInput): Promise<Hrms> {
    return await this.service.createHrms({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Hrms] })
  @ApiNestedQuery(HrmsFindManyArgs)
  async hrmsItems(@common.Req() request: Request): Promise<Hrms[]> {
    const args = plainToClass(HrmsFindManyArgs, request.query);
    return this.service.hrmsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hrms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hrms(
    @common.Param() params: HrmsWhereUniqueInput
  ): Promise<Hrms | null> {
    const result = await this.service.hrms({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hrms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHrms(
    @common.Param() params: HrmsWhereUniqueInput,
    @common.Body() data: HrmsUpdateInput
  ): Promise<Hrms | null> {
    try {
      return await this.service.updateHrms({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hrms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHrms(
    @common.Param() params: HrmsWhereUniqueInput
  ): Promise<Hrms | null> {
    try {
      return await this.service.deleteHrms({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
