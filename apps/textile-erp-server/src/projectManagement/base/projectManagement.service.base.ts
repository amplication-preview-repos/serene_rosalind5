/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProjectManagement as PrismaProjectManagement,
} from "@prisma/client";

export class ProjectManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectManagement.count(args);
  }

  async projectManagements(
    args: Prisma.ProjectManagementFindManyArgs
  ): Promise<PrismaProjectManagement[]> {
    return this.prisma.projectManagement.findMany(args);
  }
  async projectManagement(
    args: Prisma.ProjectManagementFindUniqueArgs
  ): Promise<PrismaProjectManagement | null> {
    return this.prisma.projectManagement.findUnique(args);
  }
  async createProjectManagement(
    args: Prisma.ProjectManagementCreateArgs
  ): Promise<PrismaProjectManagement> {
    return this.prisma.projectManagement.create(args);
  }
  async updateProjectManagement(
    args: Prisma.ProjectManagementUpdateArgs
  ): Promise<PrismaProjectManagement> {
    return this.prisma.projectManagement.update(args);
  }
  async deleteProjectManagement(
    args: Prisma.ProjectManagementDeleteArgs
  ): Promise<PrismaProjectManagement> {
    return this.prisma.projectManagement.delete(args);
  }
}
