/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectManagementService } from "../projectManagement.service";
import { ProjectManagementCreateInput } from "./ProjectManagementCreateInput";
import { ProjectManagement } from "./ProjectManagement";
import { ProjectManagementFindManyArgs } from "./ProjectManagementFindManyArgs";
import { ProjectManagementWhereUniqueInput } from "./ProjectManagementWhereUniqueInput";
import { ProjectManagementUpdateInput } from "./ProjectManagementUpdateInput";

export class ProjectManagementControllerBase {
  constructor(protected readonly service: ProjectManagementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectManagement })
  async createProjectManagement(
    @common.Body() data: ProjectManagementCreateInput
  ): Promise<ProjectManagement> {
    return await this.service.createProjectManagement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectManagement] })
  @ApiNestedQuery(ProjectManagementFindManyArgs)
  async projectManagements(
    @common.Req() request: Request
  ): Promise<ProjectManagement[]> {
    const args = plainToClass(ProjectManagementFindManyArgs, request.query);
    return this.service.projectManagements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectManagement(
    @common.Param() params: ProjectManagementWhereUniqueInput
  ): Promise<ProjectManagement | null> {
    const result = await this.service.projectManagement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectManagement(
    @common.Param() params: ProjectManagementWhereUniqueInput,
    @common.Body() data: ProjectManagementUpdateInput
  ): Promise<ProjectManagement | null> {
    try {
      return await this.service.updateProjectManagement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectManagement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectManagement(
    @common.Param() params: ProjectManagementWhereUniqueInput
  ): Promise<ProjectManagement | null> {
    try {
      return await this.service.deleteProjectManagement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
