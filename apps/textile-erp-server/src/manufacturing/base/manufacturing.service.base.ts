/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Manufacturing as PrismaManufacturing } from "@prisma/client";

export class ManufacturingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ManufacturingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.manufacturing.count(args);
  }

  async manufacturings(
    args: Prisma.ManufacturingFindManyArgs
  ): Promise<PrismaManufacturing[]> {
    return this.prisma.manufacturing.findMany(args);
  }
  async manufacturing(
    args: Prisma.ManufacturingFindUniqueArgs
  ): Promise<PrismaManufacturing | null> {
    return this.prisma.manufacturing.findUnique(args);
  }
  async createManufacturing(
    args: Prisma.ManufacturingCreateArgs
  ): Promise<PrismaManufacturing> {
    return this.prisma.manufacturing.create(args);
  }
  async updateManufacturing(
    args: Prisma.ManufacturingUpdateArgs
  ): Promise<PrismaManufacturing> {
    return this.prisma.manufacturing.update(args);
  }
  async deleteManufacturing(
    args: Prisma.ManufacturingDeleteArgs
  ): Promise<PrismaManufacturing> {
    return this.prisma.manufacturing.delete(args);
  }
}
