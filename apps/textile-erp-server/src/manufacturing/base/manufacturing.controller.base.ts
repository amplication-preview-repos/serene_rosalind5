/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ManufacturingService } from "../manufacturing.service";
import { ManufacturingCreateInput } from "./ManufacturingCreateInput";
import { Manufacturing } from "./Manufacturing";
import { ManufacturingFindManyArgs } from "./ManufacturingFindManyArgs";
import { ManufacturingWhereUniqueInput } from "./ManufacturingWhereUniqueInput";
import { ManufacturingUpdateInput } from "./ManufacturingUpdateInput";

export class ManufacturingControllerBase {
  constructor(protected readonly service: ManufacturingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Manufacturing })
  async createManufacturing(
    @common.Body() data: ManufacturingCreateInput
  ): Promise<Manufacturing> {
    return await this.service.createManufacturing({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Manufacturing] })
  @ApiNestedQuery(ManufacturingFindManyArgs)
  async manufacturings(
    @common.Req() request: Request
  ): Promise<Manufacturing[]> {
    const args = plainToClass(ManufacturingFindManyArgs, request.query);
    return this.service.manufacturings({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Manufacturing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async manufacturing(
    @common.Param() params: ManufacturingWhereUniqueInput
  ): Promise<Manufacturing | null> {
    const result = await this.service.manufacturing({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Manufacturing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateManufacturing(
    @common.Param() params: ManufacturingWhereUniqueInput,
    @common.Body() data: ManufacturingUpdateInput
  ): Promise<Manufacturing | null> {
    try {
      return await this.service.updateManufacturing({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Manufacturing })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteManufacturing(
    @common.Param() params: ManufacturingWhereUniqueInput
  ): Promise<Manufacturing | null> {
    try {
      return await this.service.deleteManufacturing({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
