/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScmService } from "../scm.service";
import { ScmCreateInput } from "./ScmCreateInput";
import { Scm } from "./Scm";
import { ScmFindManyArgs } from "./ScmFindManyArgs";
import { ScmWhereUniqueInput } from "./ScmWhereUniqueInput";
import { ScmUpdateInput } from "./ScmUpdateInput";

export class ScmControllerBase {
  constructor(protected readonly service: ScmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Scm })
  async createScm(@common.Body() data: ScmCreateInput): Promise<Scm> {
    return await this.service.createScm({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Scm] })
  @ApiNestedQuery(ScmFindManyArgs)
  async scms(@common.Req() request: Request): Promise<Scm[]> {
    const args = plainToClass(ScmFindManyArgs, request.query);
    return this.service.scms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Scm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scm(@common.Param() params: ScmWhereUniqueInput): Promise<Scm | null> {
    const result = await this.service.scm({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Scm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScm(
    @common.Param() params: ScmWhereUniqueInput,
    @common.Body() data: ScmUpdateInput
  ): Promise<Scm | null> {
    try {
      return await this.service.updateScm({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Scm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScm(
    @common.Param() params: ScmWhereUniqueInput
  ): Promise<Scm | null> {
    try {
      return await this.service.deleteScm({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
