/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Scm } from "./Scm";
import { ScmCountArgs } from "./ScmCountArgs";
import { ScmFindManyArgs } from "./ScmFindManyArgs";
import { ScmFindUniqueArgs } from "./ScmFindUniqueArgs";
import { DeleteScmArgs } from "./DeleteScmArgs";
import { ScmService } from "../scm.service";
@graphql.Resolver(() => Scm)
export class ScmResolverBase {
  constructor(protected readonly service: ScmService) {}

  async _scmsMeta(
    @graphql.Args() args: ScmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Scm])
  async scms(@graphql.Args() args: ScmFindManyArgs): Promise<Scm[]> {
    return this.service.scms(args);
  }

  @graphql.Query(() => Scm, { nullable: true })
  async scm(@graphql.Args() args: ScmFindUniqueArgs): Promise<Scm | null> {
    const result = await this.service.scm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Scm)
  async deleteScm(@graphql.Args() args: DeleteScmArgs): Promise<Scm | null> {
    try {
      return await this.service.deleteScm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
